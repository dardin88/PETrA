package it.unisa.petra.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class StatsUI extends JDialog {
    private JPanel contentPane;
    private JTextField filterField;
    private JButton filterButton;
    private JButton goBackButton;
    private JTabbedPane tabs;
    private JPanel tab1;
    private JPanel tab2;
    private JScrollPane tab1Scroll;
    private JTable consumptionTable;
    private String csvFile;
    private List<ConsumptionData> filteredConsumptionsDataList;
    private List<ConsumptionData> averagedConsumptionsDataList;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    StatsUI(String inputLocationPath) {
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setTitle("PETrA");
        setResizable(false);
        setContentPane(contentPane);
        setModal(true);
        filterField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    filterResultsActionPerformed();
                }
            }
        });
        filterButton.addActionListener(evt -> filterResultsActionPerformed());
        goBackButton.addActionListener(evt -> goBackActionPerformed());
        pack();
        setLocation((Toolkit.getDefaultToolkit().getScreenSize().width) / 2 - getWidth() / 2,
                (Toolkit.getDefaultToolkit().getScreenSize().height) / 2 - getHeight() / 2);
        try {
            this.csvFile = this.mergeRunResults(inputLocationPath);
            this.updateTable("");
            this.updateBoxplot("");
        } catch (IOException ex) {
            Logger.getLogger(StatsUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        EventQueue.invokeLater(
                () -> this.setVisible(true)
        );
    }

    private String mergeRunResults(String inputLocationPath) throws IOException {
        Collection<File> runResults = FileUtils.listFiles(new File(inputLocationPath), new NameFileFilter("result.csv"), TrueFileFilter.INSTANCE);
        File outputFile = new File(inputLocationPath + File.separator + "allRuns.csv");
        FileUtils.deleteQuietly(outputFile);
        try (PrintWriter pw = new PrintWriter(outputFile)) {
            int run = 0;
            for (File runResult : runResults) {
                boolean isHeader = true;
                LineIterator it = FileUtils.lineIterator(runResult, "UTF-8");
                while (it.hasNext()) {
                    String line = it.nextLine();
                    if (!isHeader | run == 0) {
                        pw.write(line + "\n");
                    }
                    isHeader = false;
                }
                run++;
            }
        }
        return outputFile.getAbsolutePath();
    }

    private void filterData(String nameFilter) throws IOException {
        filteredConsumptionsDataList = new ArrayList<>();

        Reader in = new FileReader(this.csvFile);
        Iterable<CSVRecord> records = CSVFormat.RFC4180.withFirstRecordAsHeader().parse(in);

        Pattern pattern = Pattern.compile("^\\S*");

        for (CSVRecord record : records) {
            String signature = record.get("signature").replaceAll("^(\\.*)", "");
            double joule = Double.parseDouble(record.get(" joule"));
            double seconds = Double.parseDouble(record.get(" seconds"));

            if (signature.contains(nameFilter) || nameFilter.equals("")) {
                Matcher matcher = pattern.matcher(signature);
                if (matcher.find()) {
                    ConsumptionData consumptionData = new ConsumptionData(matcher.group(), joule, seconds);
                    filteredConsumptionsDataList.add(consumptionData);
                }
            }
        }

    }

    private void calculateAverages() {

        averagedConsumptionsDataList = new ArrayList<>();

        for (ConsumptionData consumptionData : filteredConsumptionsDataList) {
            String signature = consumptionData.getSignature();
            double joule = consumptionData.getJoule();
            double seconds = consumptionData.getSeconds();

            boolean found = false;
            for (ConsumptionData averageConsumptionData : averagedConsumptionsDataList) {
                if (signature.equals(averageConsumptionData.getSignature())) {
                    averageConsumptionData.setJoule(averageConsumptionData.getJoule() + joule);
                    averageConsumptionData.setSeconds(averageConsumptionData.getSeconds() + seconds);
                    averageConsumptionData.setNumOfTraces(averageConsumptionData.getNumOfTraces() + 1);
                    found = true;
                }
            }
            if (!found) {
                ConsumptionData averageConsumptionData = new ConsumptionData(signature, joule, seconds);
                averagedConsumptionsDataList.add(averageConsumptionData);
            }
        }

        for (ConsumptionData averageConsumptionData : averagedConsumptionsDataList) {
            double joule = averageConsumptionData.getJoule();
            double seconds = averageConsumptionData.getSeconds();
            int numOfTraces = averageConsumptionData.getNumOfTraces();

            averageConsumptionData.setJoule(joule / numOfTraces);
            averageConsumptionData.setSeconds(seconds / numOfTraces);
        }
    }

    private void updateTable(String nameFilter) throws IOException {
        this.filterData(nameFilter);
        this.calculateAverages();

        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                new String[]{"Signature", "Joule", "Seconds"}
        );

        DecimalFormat df = new DecimalFormat("0.0000000");

        for (ConsumptionData averagedConsumptionData : averagedConsumptionsDataList) {
            model.addRow(new Object[]{averagedConsumptionData.getSignature(), df.format(averagedConsumptionData.getJoule()), df.format(averagedConsumptionData.getSeconds())});
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(model);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();

        consumptionTable.setModel(model);
        consumptionTable.setRowSorter(sorter);
    }

    private void updateBoxplot(String nameFilter) throws IOException {
        this.filterData(nameFilter);
        this.calculateAverages();

        averagedConsumptionsDataList.sort((ConsumptionData o1, ConsumptionData o2) -> -Double.compare(o1.getJoule(), o2.getJoule()));

        int numOfBoxplot = 5;

        if (averagedConsumptionsDataList.size() < 5) {
            numOfBoxplot = averagedConsumptionsDataList.size();
        }

        List<ConsumptionData> mostGreedyAveragedData = averagedConsumptionsDataList.subList(0, numOfBoxplot);

        DefaultBoxAndWhiskerCategoryDataset dataset = new DefaultBoxAndWhiskerCategoryDataset();

        int i = 0;
        for (ConsumptionData mInstance : mostGreedyAveragedData) {
            BoxplotData mostGreedyData = new BoxplotData(mInstance.getSignature());
            for (ConsumptionData fInstance : filteredConsumptionsDataList) {
                if (fInstance.getSignature().equals(mInstance.getSignature())) {
                    mostGreedyData.addValue(fInstance.getJoule());
                }
            }
            dataset.add(mostGreedyData.getValues(), (i + 1) + ": " + mostGreedyData.getSignature(), (i + 1));
            i++;
        }

        String boxplot_title = "Top 5 Energy Greedy Methods";

        CategoryAxis xAxis = new CategoryAxis("Signatures");
        NumberAxis yAxis = new NumberAxis("Consumptions");

        yAxis.setAutoRangeIncludesZero(false);
        BoxAndWhiskerRenderer renderer = new BoxAndWhiskerRenderer();

        renderer.setFillBox(true);
        renderer.setBaseToolTipGenerator(new BoxAndWhiskerToolTipGenerator());

        CategoryPlot plot = new CategoryPlot(dataset, xAxis, yAxis, renderer);

        JFreeChart chart = new JFreeChart(
                boxplot_title,
                new Font("SansSerif", Font.BOLD, 14),
                plot,
                true
        );

        chart.setAntiAlias(true);

        ChartPanel chartPanel = new ChartPanel(chart, true, true, true, true, true);
        chartPanel.setMouseWheelEnabled(true);

        tab2.removeAll();
        tab2.add(chartPanel, new GridConstraints());
    }

    private void filterResultsActionPerformed() {
        try {
            updateTable(filterField.getText());
            updateBoxplot(filterField.getText());
        } catch (IOException ex) {
            Logger.getLogger(StatsUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void goBackActionPerformed() {
        this.dispose();
        new MainUI().setVisible(true);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 4, new Insets(10, 10, 10, 10), -1, -1));
        filterField = new JTextField();
        filterField.setToolTipText("Filter results.");
        contentPane.add(filterField, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        goBackButton = new JButton();
        goBackButton.setIcon(new ImageIcon(getClass().getResource("/back.png")));
        goBackButton.setText("Go back");
        contentPane.add(goBackButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        filterButton = new JButton();
        filterButton.setIcon(new ImageIcon(getClass().getResource("/filter.png")));
        filterButton.setText("Filter Results");
        filterButton.setToolTipText("Filter results.");
        contentPane.add(filterButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tabs = new JTabbedPane();
        contentPane.add(tabs, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(600, 600), null, 0, false));
        tab1 = new JPanel();
        tab1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabs.addTab("Average Consumptions", tab1);
        tab1Scroll = new JScrollPane();
        tab1.add(tab1Scroll, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        consumptionTable = new JTable();
        consumptionTable.setAutoCreateRowSorter(true);
        consumptionTable.setEnabled(false);
        tab1Scroll.setViewportView(consumptionTable);
        tab2 = new JPanel();
        tab2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabs.addTab("Consumptions Distributions", tab2);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
